"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const is_url_1 = __importDefault(require("is-url"));
const path_1 = __importDefault(require("path"));
const url_1 = require("url");
const fetch_1 = require("./fetch");
const fs_1 = require("./fs");
exports.downloadFile = async (url, filePath, fileName) => {
    // Validation
    if (!is_url_1.default(url))
        throw new Error('Invalid URL');
    if (filePath === undefined || filePath === null || filePath === '') {
        throw new Error('Please specify a File Path');
    }
    try {
        // Download file contents
        const resp = await fetch_1.fetch(url);
        // Parse a filename
        const parsedFile = url_1.parse(url).pathname;
        if (parsedFile === undefined)
            throw new Error('cannot determine file name');
        const fileExt = path_1.default.extname(parsedFile);
        if (fileName === undefined || fileName === null || fileName === '') {
            fileName = path_1.default.basename(parsedFile, fileExt);
        }
        // File Operations
        const fullFileName = `${fileName}${fileExt}`;
        const fullPath = path_1.default.join(filePath, fullFileName);
        await fs_1.writeFile(fullPath, await resp.buffer());
    }
    catch (err) {
        console.error(`${url} - ${err.message}`);
    }
};
exports.downloadArray = async (URLs, filePath, keepFilenames = false) => {
    // Filter and validate
    URLs = URLs.filter(url => is_url_1.default(url));
    if (URLs.length === 0)
        throw new Error('No valid URLs passed');
    if (filePath === undefined || filePath === null || filePath === '') {
        throw new Error('Please specify a File Path');
    }
    for (const i in URLs) {
        // Define
        if (URLs[i] === undefined)
            continue;
        const url = URLs[i];
        const fileName = keepFilenames ? null : i;
        // Download
        try {
            exports.downloadFile(url, filePath, fileName);
        }
        catch (err) {
            console.error(err.message);
        }
    }
};
//# sourceMappingURL=lib.js.map